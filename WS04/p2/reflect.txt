///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  : Nathan Kong
Student ID#: 150950236

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1.
    My ultimate goal is try to reduce the number of duplicated code as much 
    as possible. Especially in the iteration and selection logic parts, I 
    will try to avoid doing the same iteration/selection logic too many 
    times.

    For instance, in part 1 of this work shop, instead of putting an if 
    statment to validate user input in each case of the switch block, I decided 
    to put it outside of the switch block:

        if (cmd != 'D' && cmd!= 'W' && cmd != 'F' && cmd != 'Q') {...}
        
        if (numItr < 3 || numItr > 20) {...}

        switch (cmd) { case 'D' ..., case 'W' ..., case 'F' ...}
    
    The swicth block now only have to handle the printf statements. By 
    separating the two and avoiding redundant codes, the program will be 
    easier to maintain. For instance, if I decided to change the valid range 
    from [3,20] to [3,20), I will only have to change one line of code.

    On the other hand, I would also try to avoid the pyramids of doom by 
    using guards instead. Right after those guard statements, I would add some 
    comments to remind myself what values the variables must be. For instance:

      if (a < 0)
          // exit
          ...
      
      if (a > 50)
          // exit
          ...
      
      // a must be [0, 50]
      ...
    
    This simplifies the code and makes it easier to read. The comment that 
    states the only/remaining possible values after the guard statements can 
    also be helpful when I revisit the code after a certain period of time. 
    As I don't have to go through all those guard statements again.
    
    For complex one-liner logics, I would separate them into multiple lines to 
    make it easier to read, like the one from w3p2 below:
        printf(" 3|       %d         |      %d      |   %d   |\n\n",
            (coffee3Type == ctmCoffeeTyp) ||
            (coffee3Type - ctmCoffeeTyp == 32) ||
            (coffee3Type - ctmCoffeeTyp == -32),

            (coffee3Weight == 250 && ctmCoffeeWgt >= 1 && ctmCoffeeWgt <= 4) ||
            (coffee3Weight == 500 && ctmCoffeeWgt >= 5 && ctmCoffeeWgt <= 9) ||
            (coffee3Weight == 1000 && ctmCoffeeWgt >= 10),
            
            (coffee3Cream == ctmCoffeeCrm) ||
            (coffee3Cream - ctmCoffeeCrm == 32) ||
            (coffee3Cream - ctmCoffeeCrm == -32)
        );
    Here, I separate the 3 %d into 3 groups, and separate each of the || 
    cases in each group into a new line.

2.
    Instead of nesting multiple if statements, we can simply negate the 
    logic to "flatten" the code. Instead of:

        if (condition1) {
            if (condition2) {
                if (condition3) {
                    // condition{1,3} must be true
                    ...
                }
            }
        }

    We can do something like:

        if (!condition1) { /* early exit */ }
        if (!condition2) { /* early exit */ }
        if (!condition3) { /* early exit */ }

        // condition{1, 2, 3} must be true
        ...
    
    Or:

        int flag = 1;
        if (!condition1) { flag = 0; }
        if (!condition2) { flag = 0; }
        if (!condition3) { flag = 0; }

        if (flag) {
            // condition{1, 2, 3} must be true
            ...
        }

3. 
  Using a series of if-else statements can reduce the number of 
  condition-checking performed, which means fewer lines of code will be 
  executed. Consider the code below:
      // Series of ifs
      if (val == 1)
          ...
      if (val == 2)
          ...
      if (val == 3)
          ...
      if (val == 4)
          ...
      if (val == 5)
          ...
      
      // Series of if-else ifs
      if (val == 1)
          ...
      else if (val == 2)
          ...
      else if (val == 3)
          ...
      else if (val == 4)
          ...
      else if (val == 5)
          ...
  Regardless of the value of `val`, the former will have to execute all 5 if 
  statements. This is redundant as once one of the if statement is true, it 
  is unnecessary to perform any further checks. As for the latter, only when 
  val == 5, will it have to execute all 5 if statements as well. In all 
  other cases, only 1 if statement will be executed.
